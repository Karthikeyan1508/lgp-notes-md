### Operating System Structures

System software is a category of low-level software that directly manages and controls a computer’s hardware components. It acts as a bridge between the user and the physical hardware, enabling other software (like applications) to function properly. It is essential for the basic functioning of any computer system.
## Importance
System software plays a crucial role in the functioning of a computer system for several reasons:

Hardware Communication: It acts as a bridge between hardware and application software, enabling seamless interaction and coordination between the two.

### Resource Management:
System software efficiently manages system resources such as CPU, memory, and storage, ensuring optimal performance and balanced resource allocation among tasks.

### Security: 
It implements essential security features like firewalls, antivirus programs, and data encryption to safeguard the system from unauthorized access, malware, and other threats.

### User Interface:
It provides the necessary interfaces—graphical or command-line—that allow users to interact with the system and perform various operations.

### Application Execution: 
It offers the foundation for installing, managing, and running application programs by providing essential runtime services and libraries.

### System Configuration and Customization: 
System software enables users to modify settings and configure the environment according to their preferences, offering better control and flexibility.

## Key Features of System Software
System software, particularly the operating system, is equipped with several essential features that enable efficient and secure system operation:

### Memory Management:
The operating system manages the system’s primary memory (RAM) by keeping track of each memory location and allocating memory to processes when requested. It also reclaims memory once a process terminates, ensuring optimal memory utilization.

### Processor Management:
The OS handles process scheduling and CPU allocation. It assigns CPU time to processes based on scheduling policies and deallocates it when a process completes or is interrupted.

### File Management:
The system software is responsible for managing files on storage devices. It handles the creation, deletion, reading, writing, and access permissions of files and directories, ensuring secure and efficient file operations.

### Security Management:
System software ensures the protection of data and resources from unauthorized access through authentication mechanisms such as passwords, encryption, and access control policies.

### Error Detection and Handling:
It includes features for detecting and reporting system errors. Tools like system dumps, trace logs, and diagnostic messages help identify and resolve faults, ensuring system reliability.

### Process Scheduling:
The operating system uses various scheduling algorithms (like Round Robin, Priority Scheduling, etc.) to determine the order in which processes execute, maximizing CPU efficiency and system responsiveness.

### Types of System Software
System software is essential for managing hardware and supporting the execution of application software. Below are the major types of system software:

## 1. Operating System (OS)
The Operating System is the core system software that manages hardware resources and provides services for application software. It acts as an interface between the hardware and the user.

### Key Functions:

- *Resource Management:* Manages CPU time, memory, and peripheral devices across processes.

- *Process Management:* Handles process creation, execution, scheduling, and termination.

- *Memory Management:* Optimizes allocation and deallocation of RAM for active processes.

- *File Management:* Controls how data is stored, retrieved, and organized in the file system.

- *Device Management:* Manages communication between the OS and hardware devices through drivers.

- *Security:* Implements authentication and access control mechanisms for users and data.

Examples: Windows, Linux, macOS, Android

## 2. Programming Language Translators
These tools translate high-level code into machine-level code so that it can be executed by the system.

### Types of Translators:

*Compiler:*
Translates entire high-level programs into machine code in one go.
Efficient for execution but slower in compilation.
Examples: gcc, javac, g++

*Interpreter:*
Translates and executes code line by line.
Suitable for scripting and debugging.
Examples: Python, Ruby, PHP

*Assembler:*
Converts assembly language code into machine language.
One-to-one correspondence between instructions.

Common in embedded and hardware-specific development.

### 3. Device Drivers
Device drivers are programs that enable the operating system to communicate with hardware components.
- Act as translators between the OS and hardware devices.
- Ensure proper functioning of devices like keyboards, printers, and displays.
- Most are pre-installed by manufacturers.

Examples: Printer drivers, USB drivers, Graphics drivers

### 4. Firmware
Firmware is low-level software embedded directly into hardware components. It provides the instructions needed for devices to communicate with other system components.

- Resides in non-volatile memory (ROM, Flash, EPROM).
- Essential for booting and basic device control.

*Types:*
- BIOS (Basic Input/Output System) – Initializes hardware during boot.
- UEFI (Unified Extensible Firmware Interface) – A modern, more secure replacement for BIOS.

### 5. Utility Software
Utility programs are specialized tools that help monitor, maintain, and optimize system performance.

- System Maintenance: Disk cleanup, defragmentation, backup.

- Security: Antivirus, firewall, malware detection.

- *Data Compression:* Tools like WinRAR and WinZip reduce storage usage.

- *Recovery & Partitioning:* Helps with data recovery and managing disk partitions.

Examples: CCleaner, WinZip, Norton Antivirus, Disk Management

https://www.geeksforgeeks.org/system-software/

# Difference Between User Mode and Kernel Mode


User mode and kernel mode are two working states inside a laptop’s working system that determine the level of access and control, a technique can have over machine resources. Understanding the differences among these modes is critical to knowing how modern working systems manage safety and resource allocation.

## What is User Mode?
When a Program is booted up on an Operating system let’s say Windows, then it launches the program in user mode. When a user-mode program requests to run, a process and virtual address space (address space for that process) are created for it by Windows. User-mode programs are less privileged than kernel-mode applications and are not allowed to access the system resources directly. For instance, if an application under user mode wants to access system resources, it will have to first go through the Operating system kernel by using syscalls.  

In user mode, applications run with limited privileges to prevent direct access to hardware, ensuring system stability. In kernel mode, the operating system has unrestricted access to all hardware resources, enabling it to perform critical tasks such as memory management and process control.

**Advantages**
- Stability and Reliability
- Simplified Debugging

**Disadvantages**
- Performance Overhead
- Limited Access

## What is Kernel Mode?
The kernel is the core program on which all the other operating system components rely, it is used to access the hardware components and schedule which processes should run on a computer system and when, and it also manages the application software and hardware interaction. Hence it is the most privileged program, unlike other programs, it can directly interact with the hardware. When programs running under user mode need hardware access for example webcam, then first it has to go through the kernel by using a syscall, and to carry out these requests the CPU switches from user mode to kernel mode at the time of execution. After finally completing the execution of the process the CPU again switches back to the user mode.

**Advantages**
- Direct Hardware Access
- Complete Control

**Disadvantages**
- Increased Risk
- Complex Debugging

## User vs Kernel Mode

### Difference Between Kernel Mode and User mode

| Criteria                | Kernel Mode                                                                 | User Mode                                                                 |
|-------------------------|------------------------------------------------------------------------------|----------------------------------------------------------------------------|
| Access to Resources     | In kernel mode, the program has direct and unrestricted access to system resources. | In user mode, the application program do not have direct access to system resources. In order to access the resources, a system call must be made. |
| Interruptions           | In Kernel mode, the whole operating system might go down if an interrupt occurs | In user mode, a single process fails if an interrupt occurs.               |
| Modes                   | Kernel mode is also known as the master mode, privileged mode, or system mode. | User mode is also known as the unprivileged mode, restricted mode, or slave mode. |
| Virtual address space   | In kernel mode, all processes share a single virtual address space.          | In user mode, all processes get separate virtual address space.            |
| Level of privilege      | In kernel mode, the applications have more privileges as compared to user mode. | While in user mode the applications have fewer privileges.                 |
| Restrictions            | As kernel mode can access both the user programs as well as the kernel programs there are no restrictions. | While user mode needs to access kernel programs as it cannot directly access them. |
| Mode bit value          | The mode bit of kernel-mode is 0.                                            | While the mode bit of user-mode is 1.                                      |
| Memory References       | It is capable of referencing both memory areas.                              | It can only make references to memory allocated for user mode.             |
| System Crash            | A system crash in kernel mode is severe and makes things more complicated.   | In user mode, a system crash can be recovered by simply resuming the session. |
| Access                  | Only essential functionality is permitted to operate in this mode.           | User programs can access and execute in this mode for a given system.      |
| Functionality           | The kernel mode can refer to any memory block in the system and can also direct the CPU for the execution of an instruction, making it a very potent and significant mode. | The user mode is a standard and typical viewing mode, which implies that information cannot be executed on its own or reference any memory block; it needs an Application Protocol Interface (API) to achieve these things. |
